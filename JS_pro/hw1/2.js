"use strict";

/*
###Задание 2
Вы управляете рестораном, в котором работают разные повара, специализирующиеся
на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.
Необходимо реализовать функцию newOrder. Создавать вспомогательные функции,
коллекции, не запрещается. Старайтесь использовать коллекции Map/Set, где это
актуально. Представленный ниже код должен работать.

Повара и их специализации:
Олег - специализация: Пицца.
Андрей - специализация: Суши.
Анна - специализация: Десерты.

Блюда, которые могут заказать посетители:
Пицца "Маргарита"
Пицца "Пепперони"
Пицца "Три сыра"
Суши "Филадельфия"
Суши "Калифорния"
Суши "Чизмаки"
Суши "Сеякемаки"
Десерт Тирамису
Десерт Чизкейк
*/

"use strict";

// Посетитель ресторана.
class Client {
  constructor(firstname, lastname) {
    this.firstname = firstname;
    this.lastname = lastname;
  }
}

// Вам необходимо реализовать класс, который управляет заказами и поварами.
class Manager {
  constructor() {
    this.chefs = new Map([
      ["Пицца", { name: "Олег" }],
      ["Суши", { name: "Андрей" }],
      ["Десерт", { name: "Анна" }],
    ]);

    this.menu = new Set([
      "Маргарита",
      "Пепперони",
      "Три сыра",
      "Филадельфия",
      "Калифорния",
      "Чизмаки",
      "Сеякемаки",
      "Тирамису",
      "Чизкейк",
    ]);
  }

  newOrder(client, ...orders) {
    const clientName = `${client.firstname} ${client.lastname}`;
    console.log(`Клиент ${clientName} заказал:`);

    for (const order of orders) {
      if (!this.menu.has(order.name)) {
        throw new Error(`${order.type} "${order.name}" - такого блюда не существует.`);
      }

      const chef = this.chefs.get(order.type);
      if (chef) {
        console.log(`${order.type} "${order.name}" - ${order.quantity}; готовит повар ${chef.name}`);
      } else {
        console.log(`Для ${order.type} "${order.name}" нет повара.`);
      }
    }
  }
}

// Можно передать внутрь конструктора что-либо, если необходимо.
const manager = new Manager();

// Вызовы ниже должны работать верно, менять их нельзя, удалять тоже.
manager.newOrder(
  new Client("Иван", "Иванов"),
  { name: "Маргарита", quantity: 1, type: "Пицца" },
  { name: "Пепперони", quantity: 2, type: "Пицца" },
  { name: "Чизкейк", quantity: 1, type: "Десерт" },
);

// Вывод:
// Клиент Иван заказал:
// Пицца "Маргарита" - 1; готовит повар Олег
// Пицца "Пепперони" - 2; готовит повар Олег
// Десерт "Чизкейк" - 1; готовит повар Анна

// ---

const clientPavel = new Client("Павел", "Павлов");
manager.newOrder(
  clientPavel,
  { name: "Филадельфия", quantity: 5, type: "Суши" },
  { name: "Калифорния", quantity: 3, type: "Суши" },
);


manager.newOrder(
  clientPavel,
  { name: "Калифорния", quantity: 1, type: "Суши" },
  { name: "Тирамису", quantity: 2, type: "Десерт" },
  );
  
  // Вывод:
  // Клиент Павел заказал:
  // Суши "Филадельфия" - 5; готовит повар Андрей
  // Суши "Калифорния" - 3; готовит повар Андрей

  try {
    manager.newOrder(
      clientPavel,
      { name: "Филадельфия", quantity: 1, type: "Суши" },
      { name: "Трубочка с вареной сгущенкой", quantity: 1, type: "Десерт" },
      );
    } catch (error) {
      console.error(error.message);
    }
    // Ничего не должно быть добавлено, должна быть выброшена ошибка:
    // Десерт "Трубочка с вареной сгущенкой" - такого блюда не существует.